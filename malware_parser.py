from __future__ import annotations
import re
from typing import Tuple


class MalwareNameParser:
    """
    基于 ceventName（按你的新要求）解析“病毒家族/名称”。
    规则与旧版 parse_malware_from_msg 类似，但输入换成 ceventName。
    """

    _CANON_FAMILIES = {
        "emotet": "Emotet", "trickbot": "TrickBot", "qakbot": "Qakbot", "qbot": "Qakbot",
        "icedid": "IcedID", "ursnif": "Ursnif", "dridex": "Dridex", "gozi": "Gozi",
        "tinba": "Tinba", "zeus": "Zeus", "zbot": "Zeus", "ramnit": "Ramnit",
        "gamarue": "Gamarue", "conficker": "Conficker", "virut": "Virut", "sality": "Sality",
        "raccoon": "Raccoon", "vidar": "Vidar", "azorult": "Azorult", "redline": "RedLine",
        "formbook": "FormBook", "agenttesla": "AgentTesla", "lokibot": "LokiBot",
        "remcos": "Remcos", "nanocore": "NanoCore", "quasar": "Quasar",
        "asyncrat": "AsyncRAT", "njrat": "NjRAT", "warzone": "WarzoneRAT",
        "netwire": "NetWire", "poisonivy": "PoisonIvy", "plugx": "PlugX",
        "gh0st": "Gh0st", "shadowpad": "ShadowPad", "lockbit": "LockBit",
        "revil": "REvil", "sodinokibi": "REvil", "conti": "Conti", "ryuk": "Ryuk",
        "gandcrab": "GandCrab", "cerber": "Cerber", "blackcat": "BlackCat",
        "alphv": "BlackCat", "blackbasta": "BlackBasta", "clop": "Clop", "maze": "Maze",
        "hive": "Hive", "akira": "Akira", "royal": "Royal", "blackmatter": "BlackMatter",
        "ransomexx": "RansomEXX", "medusa": "Medusa", "xmrig": "XMRig",
        "kinsing": "Kinsing", "lemonduck": "LemonDuck", "mirai": "Mirai",
        "gafgyt": "Gafgyt", "mozi": "Mozi", "cobalt strike": "CobaltStrike",
        "cobaltstrike": "CobaltStrike", "metasploit": "Metasploit", "sliver": "Sliver"
    }
    _SUFFIX_KEYWORDS = [
        "checkin", "beacon", "beaconing", "c2", "cnc", "callback", "loader", "downloader",
        "dropper", "backdoor", "ransomware", "trojan", "worm", "miner", "coinminer", "botnet",
        "rat", "keylogger", "stealer", "infostealer", "spyware", "adware", "variant", "payload",
        "infection", "probe", "scanner"
    ]
    _RE_FAMILY_STYLE = [
        re.compile(
            r'(?i)\b(?:win32|w32|msil|android|linux|osx|macos|js|vbs?|html|php|ps1?|powershell|elf|office|docm?|xlsm?|pdf)[/\.]([a-z0-9._-]{2,})'),
        re.compile(
            r'(?i)\b(?:trojan|worm|ransomware|backdoor|spyware|adware|rootkit|botnet|dropper|downloader)[/\.]([a-z0-9._-]{2,})'),
    ]

    @staticmethod
    def _normalize_space(s: str) -> str:
        s = re.sub(r'[\u3000\t]+', ' ', s or '')
        s = re.sub(r'\s{2,}', ' ', s).strip()
        return s

    @staticmethod
    def _canon(s: str) -> str:
        return s[:1].upper() + s[1:] if s else s

    def parse_family_and_name(self, text: str) -> Tuple[str, str]:
        """
        输入：ceventName
        输出：(virusFamily, virusName)
        """
        if not text:
            return "", ""
        text_norm = self._normalize_space(text)
        low = text_norm.lower()

        # 1) 家族型命名
        for rgx in self._RE_FAMILY_STYLE:
            m = rgx.search(text_norm)
            if m:
                fam = re.sub(r'[^A-Za-z0-9-]+', '',
                             m.group(1).strip("._-").replace("_", "-"))
                fam_title = self._canon(fam)
                name = fam_title
                start = m.end()
                window = low[start:start+80]
                for kw in self._SUFFIX_KEYWORDS:
                    if re.search(r'\b' + re.escape(kw) + r'\b', window):
                        name = f"{fam_title} {kw.capitalize()}"
                        break
                return fam_title, name

        # 2) 映射词典
        for k in sorted(self._CANON_FAMILIES.keys(), key=len, reverse=True):
            pattern = r'\b' + re.escape(k).replace(r'\ ', r'\s*') + r'\b'
            m = re.search(pattern, low)
            if m:
                fam_title = self._CANON_FAMILIES[k]
                name = fam_title
                start = m.end()
                window = low[start:start+80]
                for kw in self._SUFFIX_KEYWORDS:
                    if re.search(r'\b' + re.escape(kw) + r'\b', window):
                        suffix_match = re.search(
                            r'(?i)\b' + re.escape(kw) + r'\b', text_norm[start:start+80])
                        suffix = suffix_match.group(
                            0) if suffix_match else kw.capitalize()
                        name = f"{fam_title} {suffix}"
                        break
                return fam_title, name

        # 3) 中文“家族”、“勒索/木马/后门/蠕虫/挖矿”
        m = re.search(r'([A-Za-z][A-Za-z0-9._-]{2,})\s*家族', text_norm)
        if m:
            fam_title = self._canon(m.group(1))
            return fam_title, fam_title
        m = re.search(
            r'([A-Za-z][A-Za-z0-9._-]{2,})\s*(勒索|木马|后门|蠕虫|挖矿)', text_norm)
        if m:
            fam_title = self._canon(m.group(1))
            return fam_title, f"{fam_title} {m.group(2)}"

        return "", ""
